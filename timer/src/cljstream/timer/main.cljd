(ns cljstream.timer.main
  (:require
   ["package:flutter/material.dart" :as m]
   [cljd.flutter :as f]))

(def init-timer-state {:status :stopped
                     :duration (Duration .seconds 5)})

(defonce app-state (atom [(atom init-timer-state) (atom init-timer-state)]))

;; Assignment: what to do when we reach 0:00 ?
;; * at 0:00, replace countdown by "Finished!" or "Time's up!"
;; * change button label to "DONE"

;; Assignment 2:
;; * create a new dropdownbutton for handling minutes
;; * adapt both onChanged callbacks to reflect the change
;; * wrap the 2 dropdownbutton in a Row widget


;; Assignment 3 for next time:
;; * I always want at least one timer
;; * alternatively displays a message when you have no timers


(def filled-button
  (f/widget
    (m/Padding .padding (m/EdgeInsets.only .left 12))
    :get {timer-state :timer-state} #_[:timer-state] ; timer-state
    (m/FilledButton
      .onPressed (fn []
                   (case (:status @timer-state)
                     :done (swap! timer-state assoc :status :stopped)
                     :stopped
                     (swap! timer-state assoc
                       :status :running
                       :stream (-> (Stream/periodic (Duration .seconds 1)
                                     (fn [i]
                                       (let [to-go (.-inSeconds (:duration @timer-state))
                                             elapsed (inc i)]
                                         (when (= to-go elapsed)
                                           (swap! timer-state assoc :stream nil :status :done))
                                         elapsed)))))
                     :running
                     (swap! timer-state assoc :status :stopped :stream nil))
                   nil))
    :watch [{:keys [status]} timer-state]
    (m/Text (case status :running "RESET" :stopped "START" :done "DONE"))))

(def timer #_[timer-state]
  (m/Row
    .mainAxisAlignment m/MainAxisAlignment.center
    .children
    [(f/widget
       :get {timer-state :timer-state} #_[:timer-state] ; timer-state
       :watch [{:keys [status stream duration]} timer-state
               i stream]
       :let [rem-duration (. duration "-" (Duration .seconds (or i 0)))
             s (.-inSeconds rem-duration)
             minutes (quot s 60)
             s (mod s 60)]
       (case status
         :done (m/Text "Time's up!" .style (m/TextStyle .fontWeight m/FontWeight.bold .fontSize 22))
         (m/Row
           .mainAxisAlignment m/MainAxisAlignment.center
           .children
           [(m/DropdownButton
              .value minutes
              .icon (m/Icon m/Icons.arrow_downward)
              .elevation 16
              .underline (case status
                           :running nil
                           (m/Container .height 2 .color m/Colors.deepPurpleAccent))
              .onChanged (case status
                           :running nil
                           (fn [value]
                             (swap! timer-state assoc :duration (Duration .minutes value .seconds s))))
              .items (into [] (map #(m/DropdownMenuItem .value % .child (m/Text (.padLeft (str %) 2 "0")))) (range 15)))
            (m/SizedBox .width 12)
            (m/DropdownButton
              .value s
              .icon (m/Icon m/Icons.arrow_downward)
              .elevation 16
              .underline (case status
                           :running nil
                           (m/Container .height 2 .color m/Colors.deepPurpleAccent))
              .onChanged (case status
                           :running nil
                           (fn [value]
                             (swap! timer-state assoc :duration (Duration .minutes minutes .seconds value))))
              .items (into [] (map #(m/DropdownMenuItem .value % .child
                                      (m/Text (.padLeft (str %) 2 "0")))) (range 60)))])))
     filled-button]))

(defn main []
  (f/run
    m/MaterialApp
    .home
    (m/Scaffold .floatingActionButton (m/FloatingActionButton
                                        .onPressed (fn []
                                                     (swap! app-state conj (atom init-timer-state)))
                                        .child (m/Icon m/Icons.add)))
    .body
    m/Center
    :watch [as app-state]
    :get {sm m/ScaffoldMessenger} #_[m/ScaffoldMessenger] ; scaffold-messenger
    ; :let [scaffold-messenger (m/ScaffoldMessenger.of context)]
    ; :get to read a value :get -> (Object.of ctx)
    ; :bind to set a value
    (m/ListView .shrinkWrap true)
    .children
    (into [] (map
               (fn [state]
                 (m/Dismissible
                   .key (m/ValueKey state)
                   .confirmDismiss (fn [_]
                                     (if (some? (next @app-state))
                                       (future true) #_(Future.value true)
                                       (do
                                         (.showSnackBar sm #_scaffold-messenger
                                           (m/SnackBar .content (m/Text "Can't remove the last timer!")))
                                         (future false))))
                   .onDismissed (fn [_]
                                  (swap! app-state #(into [] (remove #{state}) %))
                                  #_(reset! app-state (into [] (remove #{state}) @app-state)))
                   .child
                   (f/widget
                     :bind {:timer-state state}
                     #_(timer state)
                     timer)))) as)))
