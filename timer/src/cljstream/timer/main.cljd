(ns cljstream.timer.main
  (:require
   ["dart:convert" :as convert]
   ["package:flutter/material.dart" :as m]
   ["package:http/http.dart" :as http]
   [cljd.flutter :as f]))

(def init-timer-state {:status :stopped
                     :duration (Duration .seconds 5)})

(defonce app-state (atom [(atom init-timer-state) (atom init-timer-state)]))

;; Assignment: what to do when we reach 0:00 ?
;; * at 0:00, replace countdown by "Finished!" or "Time's up!"
;; * change button label to "DONE"

;; Assignment 2:
;; * create a new dropdownbutton for handling minutes
;; * adapt both onChanged callbacks to reflect the change
;; * wrap the 2 dropdownbutton in a Row widget


;; Assignment 3 for next time:
;; * I always want at least one timer
;; * alternatively displays a message when you have no timers


(def filled-button
  (f/widget
    (m/Padding .padding (m/EdgeInsets.only .left 12))
    :get {timer-state :timer-state} #_[:timer-state] ; timer-state
    (m/FilledButton
      .onPressed (fn []
                   (case (:status @timer-state)
                     :done (swap! timer-state assoc :status :stopped)
                     :stopped
                     (swap! timer-state assoc
                       :status :running
                       :stream (-> (Stream/periodic (Duration .seconds 1)
                                     (fn [i]
                                       (let [to-go (.-inSeconds (:duration @timer-state))
                                             elapsed (inc i)]
                                         (when (= to-go elapsed)
                                           (swap! timer-state assoc :stream nil :status :done))
                                         elapsed)))))
                     :running
                     (swap! timer-state assoc :status :stopped :stream nil))
                   nil))
    :watch [{:keys [status]} timer-state]
    (m/Text (case status :running "RESET" :stopped "START" :done "DONE"))))

(def timer #_[timer-state]
  (m/Row
    .mainAxisAlignment m/MainAxisAlignment.center
    .children
    [(f/widget
       :get {timer-state :timer-state} #_[:timer-state] ; timer-state
       :watch [{:keys [status stream duration]} timer-state
               #_#_i stream]
       ;; A B C
       ;; D = IF A B C
       ; [a atom-a
       ;  b atom-b
       ;  c atom-c
       ;  d (f/$ (if (f/<! a) (f/<! b) (f/<! c))
       :let [rem-duration (f/$ (. duration "-" (Duration .seconds (or (f/<! stream) 0))))
             s (f/$ (.-inSeconds (f/<! rem-duration)))
             minutes (f/$ (quot (f/<! s) 60))
             s' (f/$ (mod (f/<! s) 60))]
       (case status
         :done (m/Text "Time's up!" .style (m/TextStyle .fontWeight m/FontWeight.bold .fontSize 22))
         (m/Row
           .mainAxisAlignment m/MainAxisAlignment.center
           .children
           [(f/widget :watch [minutes minutes]
              :let [_ (dart:core/print minutes)]
              (m/DropdownButton
                .value minutes
                .icon (m/Icon m/Icons.arrow_downward)
                .elevation 16
                .underline (case status
                             :running nil
                             (m/Container .height 2 .color m/Colors.deepPurpleAccent))
                .onChanged (case status
                             :running nil
                             (fn [value]
                               (swap! timer-state assoc :duration
                                 (Duration
                                   .minutes value
                                   .seconds (mod (.-inSeconds duration) 60)))))
                .items (into [] (map #(m/DropdownMenuItem .value % .child (m/Text (.padLeft (str %) 2 "0")))) (range 15))))
            (m/SizedBox .width 12)
            (f/widget :watch [s' s']
              (m/DropdownButton
                .value s'
                .icon (m/Icon m/Icons.arrow_downward)
                .elevation 16
                .underline (case status
                             :running nil
                             (m/Container .height 2 .color m/Colors.deepPurpleAccent))
                .onChanged (case status
                             :running nil
                             (fn [value]
                               (swap! timer-state assoc :duration (Duration
                                                                    .minutes (.-inMinutes duration)
                                                                    .seconds value))))
                .items (into [] (map #(m/DropdownMenuItem .value % .child
                                        (m/Text (.padLeft (str %) 2 "0")))) (range 60))))])))
     filled-button]))

#_(defn main []
  (f/run
    m/MaterialApp
    .home
    (m/Scaffold .floatingActionButton (m/FloatingActionButton
                                        .onPressed (fn []
                                                     (swap! app-state conj (atom init-timer-state)))
                                        .child (m/Icon m/Icons.add)))
    .body
    m/Center
    :watch [as app-state]
    :get {sm m/ScaffoldMessenger} #_[m/ScaffoldMessenger] ; scaffold-messenger
    ; :let [scaffold-messenger (m/ScaffoldMessenger.of context)]
    ; :get to read a value :get -> (Object.of ctx)
    ; :bind to set a value
    (m/ListView .shrinkWrap true)
    .children
    (into [] (map
               (fn [state]
                 (m/Dismissible
                   .key (m/ValueKey state)
                   .confirmDismiss (fn [_]
                                     (if (some? (next @app-state))
                                       (future true) #_(Future.value true)
                                       (do
                                         (.showSnackBar sm #_scaffold-messenger
                                           (m/SnackBar .content (m/Text "Can't remove the last timer!")))
                                         (future false))))
                   .onDismissed (fn [_]
                                  (swap! app-state #(into [] (remove #{state}) %))
                                  #_(reset! app-state (into [] (remove #{state}) @app-state)))
                   .child
                   (f/widget
                     :bind {:timer-state state}
                     #_(timer state)
                     timer)))) as)))

#_(defn main []
  (f/run
    :let [path "https://jsonplaceholder.typicode.com/posts/1"]
    m/MaterialApp
    .home
    (m/Scaffold .floatingActionButton (m/FloatingActionButton
                                        .onPressed (fn []
                                                     (swap! app-state conj (atom init-timer-state)))
                                        .child (m/Icon m/Icons.add)))
    .body
    m/Center
    :watch [#_{body .-body sc .-statusCode :as response}
            {:flds [body statucCode]}
            (Future.delayed (Duration .seconds 2)
              (fn [] (http/get (Uri.parse path))))
            #_(http/get (Uri.parse path))]
    (if response
      (if (= sc 200)
        (m/Text (get (convert/jsonDecode body) "title")
          #_(:title
             (into {}
               (map (fn [[k v]] [(keyword k) v]))
               (convert/jsonDecode (.-body response)))))
        (m/Text "Shit happened!"))
      (m/CircularProgressIndicator))))

(defn get-resource [] ;; going to return a Future because await was used
  (let [response (await (http/get (Uri/parse "https://jsonplaceholder.typicode.com/albums/1")))]
    (.-body response)
    (if-some [{body .-body sc .-statusCode} response]
      (get (convert/json.decode body) "title")
      "not yet")))

;;  clj -M:cljd clean
;;  flutter clean
;;  clj -M:cljd compile
;;  (if apple developer account is configured) ->> https://docs.flutter.dev/deployment/ios
;;  flutter build ipa

;;  To open Xcode
;;  open ios/Runner.xcworkspace

(defn main []
  (f/run
    :let [state (atom {:width 50
                       :height 50
                       :color m/Colors.green
                       :border-radius (m/BorderRadius.circular 8)})]
    m/MaterialApp
    .home
    (m/Scaffold
      .appBar (m/AppBar .title (m/Text "AnimatedContainer demo"))
      .floatingActionButton
      (m/FloatingActionButton
        .onPressed
        (fn []
          (reset! state {:width (rand-int 300)
                         :height (rand-int 300)
                         :color (m/Color.fromRGBO (rand-int 256) (rand-int 256) (rand-int 256) 1)
                         :border-radius (m/BorderRadius.circular (rand-int 100))})
          nil)
        .child (m/Icon m/Icons.play_arrow)))
    .body
    m/Center
    :watch [{:keys [width height color border-radius]} state]
    (m/AnimatedContainer .width width .height height
      .decoration (m/BoxDecoration .color color .borderRadius border-radius)
      .duration (Duration .seconds 1)
      .curve m/Curves.fastOutSlowIn)))
